import React from 'react';
import clsx from 'clsx';

export type <%= pascalCase(name) %>Variant = 'primary' | 'secondary' | 'outline' | 'ghost' | 'danger';

const variantClasses: Record<<%= pascalCase(name) %>Variant, string> = {
  primary:
    'bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700 text-white focus-visible:ring-indigo-500',
  secondary:
    'bg-gray-700 hover:bg-gray-800 text-white focus-visible:ring-gray-500',
  outline:
    'border border-gray-300 text-gray-700 hover:bg-gray-50 focus-visible:ring-gray-400',
  ghost:
    'bg-transparent text-gray-700 hover:bg-gray-100 focus-visible:ring-gray-400',
  danger:
    'bg-gradient-to-r from-red-500 to-pink-600 hover:from-red-600 hover:to-pink-700 text-white focus-visible:ring-red-500'
};

export interface <%= pascalCase(name) %>Props extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  /** colour scheme */
  variant?: <%= pascalCase(name) %>Variant;
  /** render an anchor instead of button */
  as?: 'button' | 'a';
  /** href is required when as="a" */
  href?: string;
}

export const <%= pascalCase(name) %>: React.FC<<%= pascalCase(name) %>Props> = ({
  variant = 'primary',
  as = 'button',
  href,
  className,
  children,
  ...rest
}) => {
  const Comp: any = as === 'a' ? 'a' : 'button';
  return (
    <Comp
      {...rest}
      href={href}
      className={clsx(
        'inline-flex items-center justify-center gap-2 px-4 py-2 rounded-md font-medium shadow-sm transition-all duration-200 transform hover:-translate-y-0.5 hover:shadow-md active:scale-95 focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2',
        variantClasses[variant],
        className
      )}
    >
      {children}
    </Comp>
  );
};

export default <%= pascalCase(name) %>;
